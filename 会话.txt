1.什么是会话：它是指客户端与服务器端之间的数据传输(登录、购物车)
2.会话管理：也就是对数据的管理
3.常用的会话技术： Cookie（数据会保存在客户端）       Session(数据会保存到服务器端)

什么是Cookie:就是一种客户端的技术，程序会把每个用户的数据以Cookie的形式写给用户各自的浏览器，当用户使用浏览器再次访问web服务器的时候
            它就会有各自的数据了。
包：javax.servlet.http.Cookie
Cookie类：主要用于存在会话的数据

1.可以通过构造器来创建Cookie  public Cookie(java.lang.String name, java.lang.String value)

2.设置Cookie  setMaxAge(int expiry)设置Cookie的有效时间(是以秒为单位的) 1*24*60*60
  1. 正数：表示Cookie数据保存浏览器的缓存到硬盘中，数值表示要保存的时间
  2. 负数：表示Cookie数据会保存到浏览器的内存中，如果浏览器关闭，cookie就失效了。
  3. 0 表示删除同名的cookie数据

3.发送Cookie到浏览器端保存  addCookie(Cookie cookie)

4.服务器端接收Cookie  getCookies() : Cookie[]

注意：后期如果解决客户端与服务器端的多次请求（也可以使用H5中的本地存储 localstorage   sessionstorage）
     Cookie的数据类型只能保存非中文字符串类型。客户端可以保存多个cookie，一个浏览器可以保存300个cookie,
     每个站点最多可以存入20个Cookie，每个cookie的大小限制为4kb


什么是Session
Session也是服务器端的一种会话技术，服务器在运行的时候可以为每一个用户的数据去创建一个单独的Session对象
Session可以为用户流利器所独享的。所以当在访问Web资源的时候，可以把各自的数据保存在各自的Session中

Session的核心：HttpSession接口，它可以在服务器端保存会话的数据，可以通过req.getSession()来获取到此接口
常用的方法：
1.  getId() 可以获取到session的编号
2.  setAttribute(java.lang.String name, java.lang.Object value)  可以向session中保存数据
3.  getAttribute(java.lang.String name) 可以根据name获取到value
4.  removeAttribute(java.lang.String name) 可以清除数据，可以在退出登录的时候可以调用此方法
5.  invalidate() 可以通过此方法销毁session对象

Session的执行原理(重要)
1. 第一次会创建一个Session对象，会给Session对象分配的一个唯一的ID （JSESSIONID）
2. 要将JSESSIONID作为Cookie的值发送给浏览器保存
3. 第二次访问服务器端的时候，浏览器会携带JSESSIONID的cookie来访问服务器
4. 服务器要得到JSESSIONID，在服务的内存中搜索是否存在对应的Session对象

注意： 保存在Session中的数据会被多个Servlet jsp所共享，只要浏览器不关闭，那么保存在session中的数据会一直有效(重要)


select * from guestbook

-- 表示查询第一页的10条数据，从第1-10条数据
select * from guestbook limit 0,10

-- 表示查询第二页的10条数据，从第11-20条数据
select * from guestbook limit 10,10

-- 表示查询第三页的10条数据，从第21-30条数据
select * from guestbook limit 20,10

-- 但是项目环境中，一般传递到后台服务中的数据是：当前的页数(currentPage 从1开始)
-- 每页显示的记录数(pageSize),在实际中一定要经过换算页码来进行分页查询
-- select * from table limit(currentPage-1) * pageSize,pageSize (重要)


filter对象只会创建一次，init方法也只会执行一次(重要)